name: CI/CD Pipeline

on:
  push:
    branches:
      - master
      - main
      - develop
      - Pipeline-configuration
  pull_request:

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
  # SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  # SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  IMAGE_NAME: erieq/game-mutual
  IMAGE_TAG: csharp-app-1.0
  BACKEND_DIRECTORY: ./GameMutualAPI/GameMutual.sln
  FRONTEND_DIRECTORY: ./GameMutualFrontend/

jobs:
  Vue-Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        run: echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker build -t erieq/frontend-gamemutual $FRONTEND_DIRECTORY
          docker push erieq/frontend-gamemutual

  ASP-Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        run: echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker build -t erieq/game-mutual $BACKEND_DIRECTORY
          docker push erieq/game-mutual

  ASP-Unit-Test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '7.0'

      - name: Run ASP.NET Unit Tests
        run: |
          dotnet restore $BACKEND_DIRECTORY
          dotnet build $BACKEND_DIRECTORY
          dotnet test $BACKEND_DIRECTORY

  # sonarqube-check:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v2

  #     - name: Setup JDK
  #       uses: actions/setup-java@v2
  #       with:
  #         distribution: 'adopt'
  #         java-version: '17'

  #     - name: Run SonarQube Check
  #       run: |
  #         dotnet tool install --global dotnet-sonarscanner
  #         dotnet sonarscanner begin /k:"I510637_game-mutual_AYvtZnUrZlX88Bmommvq" /d:sonar.token="$SONAR_TOKEN" /d:"sonar.host.url=$SONAR_HOST_URL"
  #         dotnet build $BACKEND_DIRECTORY
  #         dotnet sonarscanner end /d:sonar.token="$SONAR_TOKEN"

  # sonarqube-vulnerability-report:
  #   runs-on: ubuntu-latest
  #   needs: sonarqube-check
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v2

  #     - name: Download SonarQube SAST Report
  #       run: 'curl -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/issues/gitlab_sast_export?projectKey=I510637_game-mutual_AYvtZnUrZlX88Bmommvq&branch=${GITHUB_REF##*/}&pullRequest=${GITHUB_RUN_ID}" -o gl-sast-sonar-report.json'

  #     - name: Upload SAST Report as Artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: sast-report
  #         path: gl-sast-sonar-report.json

  build_image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        run: echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker build -t $IMAGE_NAME:$IMAGE_TAG .
          docker push $IMAGE_NAME:$IMAGE_TAG